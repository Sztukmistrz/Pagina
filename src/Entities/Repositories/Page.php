<?php

namespace Sztukmistrz\Pagina\Entities\Repositories;

use Doctrine\ORM\EntityRepository;
use LaravelLocalization;

use \Gedmo\Tree\Traits\Repository\ORM\NestedTreeRepositoryTrait;

use LaravelDoctrine\ORM\Facades\EntityManager as E;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use SEOL;
/**
 * Page
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Page extends EntityRepository
{



	use NestedTreeRepositoryTrait; // or MaterializedPathRepositoryTrait or ClosureTreeRepositoryTrait.

	public function __construct(EntityManager $em, ClassMetadata $class)
    {
        parent::__construct($em, $class);

        $this->initializeTreeRepository($em, $class);
    }


    public function getPagesMenuById($id)
    {
    	$this->_em->clear();

  //   	$queryString = '
  //   		SELECT   r, rn
  //   		FROM '.$this->_entityName.' r
  //   		lEFT JOIN r.routeName rn 
  //   		WHERE rn.name = :routeName
  //   	';
  //   	$query = $this->_em->createQuery($queryString);
  //   	$query->setParameter('routeName',$routeName);
  //   	$query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, LaravelLocalization::getCurrentLocale());
    	
		// $this->query->setHint(
		//     \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
		//     'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
		// );
		// //$this->_em->clear();
		// $carrot = $this->query->getResult()[0];
		// $this->_em->clear();
		
		$rootNode = $this->findOneById($id);
		
		$options = array(
		    'decorate' => true,
		    'rootOpen' => '',
		    'rootClose' => '',
		    'childOpen' => '',
		    'childClose' => '',
		    'nodeDecorator' => function($node) {
		    	
		    	$x = $this->_em->getRepository('Sztukmistrz\Pagina\Entities\RouteName')->findOneById($node['id']);
		    	$rn = $x->getName();
		    	$title = \Lang::get('seo::sztukmistrz-seo-routes.'.$rn.'.title');
		    	if (\Lang::has('seo::sztukmistrz-seo-routes.'.$rn.'.extra')) {
		    		$extra =  \Lang::get('seo::sztukmistrz-seo-routes.'.$rn.'.extra');
		    	}else{
		    		$extra ='';
		    	}
		    	
		    	return SEOL::Link($rn,['class'=>"list-group-item"]);

		        return '<a href="'.\URL::route($rn).'"  class="list-group-item" '.$extra.'>'.$title.'</a>';
		    }
		);

    	$htmlTree = $this->childrenHierarchy(
		    $rootNode, /* starting from root nodes */
		    false, /* false: load all children, true: only direct */
		        $options
		);

    	//$this->_em->clear();
		return $htmlTree;
    }


	public function getPage($routeName)
	{

		$queryString = '
			SELECT   r,
			la,  pa, me, viu, 
			vi, pty, rn,
			partial us.{id, name, firstname, lastname}
			FROM '.$this->_entityName.' r 
			LEFT JOIN r.menu me

			LEFT JOIN r.routeName rn

			LEFT JOIN r.layout la
			LEFT JOIN r.view viu
			
			LEFT JOIN r.pageText pa
				LEFT JOIN pa.pageTextType pty
				LEFT JOIN pa.view vi
			
			LEFT JOIN r.user us

			WHERE rn.name = :routeName
		';
		$this->query = $this->_em->createQuery($queryString);
		$this->query->setParameter('routeName',$routeName);

		$this->query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, LaravelLocalization::getCurrentLocale());

		$this->query->setHint(
		    \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
		    'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
		);
		
		

		$record = $this->query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
		
		return $record;
	}






}